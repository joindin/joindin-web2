name: "Continuous Integration"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  dependency-analysis:
    name: "Dependency Analysis"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version:
          - 7.4

    steps:
      - name: "Checkout"
        uses: actions/checkout@master

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php-version }}
          extensions: "gd, intl, json, mbstring, pdo"

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1.0.0
        with:
          path: ~/.composer/cache
          key: php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php-${{ matrix.php-version }}-composer-locked-

      - name: "Install dependencies with composer"
        run: $(which composer) install

      - name: "Run dependency analysis with composer-require-checker"
        run: vendor/bin/composer-require-checker --config-file=composer-require-checker.json

  static-analysis:
    name: "Static Analysis"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version:
          - 7.4

    steps:
      - name: "Checkout"
        uses: actions/checkout@master

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php-version }}
          pecl: true
          extensions: "gd, intl, json, mbstring, pdo"

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: php-${{ matrix.php-version }}-composer-locked${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php-${{ matrix.php-version }}-composer-locked

      - name: "Install dependencies with composer"
        run: $(which composer) install

      - name: "Run static analysis with phpstan"
        run: vendor/bin/phpstan analyze --configuration=phpstan.neon

  tests:
    name: "Tests"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version:
          - 7.4

    steps:
      - name: "Checkout"
        uses: actions/checkout@master

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php-version }}
          extensions: "gd, intl, json, mbstring, pdo"
          coverage: "xdebug"

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php-${{ matrix.php-version }}-composer-locked-

      - name: "Install dependencies with composer"
        run: $(which composer) install

      - name: "Create build directory"
        run: mkdir -p build

#      - name: "Copy configuration"
#        run: cp config.php.distsrc/ src/config.php

      - name: "Dump Xdebug filter with phpunit"
        run: vendor/bin/phpunit --dump-xdebug-filter=build/xdebug-filter.php

      - name: "Run tests with phpunit"
        run: vendor/bin/phpunit --coverage-clover=build/logs/clover.xml --coverage-text --prepend=build/xdebug-filter.php

      - name: "Download code coverage uploader for Codecov.io"
        run: curl -s https://codecov.io/bash -o codecov

      - name: "Send code coverage report to Codecov.io"
        run: bash codecov -t ${{ secrets.CODECOV_TOKEN }}
